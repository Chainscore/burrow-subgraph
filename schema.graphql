type Event @entity {
  id: ID!
  name: String!
  args: String!
  timestamp: BigInt!
}

type Method @entity {
  id: ID!
  name: String!
  args: String!
  timestamp: BigInt!
}

type LendingProtocol @entity {
  id: ID!
  owner: String!
  oracle: String!
  booster: Token!
  boosterMultiplier: BigInt!
  maxAssets: Int!
}

type Market @entity {
  " Smart contract address of the market "
  id: ID!

  " The protocol this pool belongs to "
  protocol: LendingProtocol!

  " Name of market "
  name: String

  " Is this market active or is it frozen "
  isActive: Boolean!

  " Can you use the output token as collateral "
  canUseAsCollateral: Boolean!

  " Can you borrow from this market "
  canBorrowFrom: Boolean!

  " Token that need to be deposited to take a position in protocol "
  inputToken: Token!

  " Current TVL (Total Value Locked) of this market "
  totalValueLockedUSD: BigDecimal!

  " All revenue generated by the market. "
  cumulativeTotalRevenueUSD: BigDecimal! 
  
  " All interest rates / fees allowed in the market. Interest rate should be in APY percentage "
  rates: [InterestRate!]!

  " Current balance of all deposited assets (not historical cumulative), in USD "
  totalDepositBalanceUSD: BigDecimal!
  _totalDeposited: BigInt!
  _totalDepositedHistory: BigInt!
  _totalReserved: BigInt!
  _totalWithrawn: BigInt!
  _totalWithrawnHistory: BigInt!
  _yieldAccured: BigInt!
  _last_update_timestamp: BigInt!
  _utilization: BigDecimal!

  " Current balance of all borrowed/minted assets (not historical cumulative), in USD "
  totalBorrowBalanceUSD: BigDecimal!
  _totalBorrowed: BigInt!
  _totalBorrowedHistory: BigInt!
  _totalRepaidHistory: BigInt! 
  _interestAccured: BigInt!

  ##### Token Balances #####

  " Amount of input tokens in the market "
  inputTokenBalance: BigInt!

  outputTokenBalance: BigInt!

  " Price per share of input token in USD "
  inputTokenPriceUSD: BigDecimal!

  " Creation timestamp "
  createdTimestamp: BigInt!

  " Creation block number "
  createdBlockNumber: BigInt!

  ##### Market Specs #####

  _reserveRatio: BigInt!
  _target_utilization: BigInt!
  _target_utilization_rate: BigInt!
  _max_utilization_rate: BigInt!
  _volatility_ratio: BigInt!

  ##### Account/Position Data #####

  " All positions in this market "
  positions: [Position!]! @derivedFrom(field: "market")

  " All deposits made to this market "
  deposits: [Deposit!]! @derivedFrom(field: "market")

  " All withdrawals made from this market "
  withdraws: [Withdraw!]! @derivedFrom(field: "market")

  " All borrows from this market "
  borrows: [Borrow!]! @derivedFrom(field: "market")
  " All repayments to this market "
  repays: [Repay!]! @derivedFrom(field: "market")

  " All liquidations made to this market "
  liquidates: [Liquidate!]! @derivedFrom(field: "market")
}

type Position @entity {
  id: ID!
  account: Account!
  market: Market!
  collateral: BigInt!
  
  deposited: BigInt!
  totalDeposited: BigInt!
  totalWithdrawn: BigInt!
  _yieldAccured: BigInt

  borrowed: BigInt!
  totalBorrowed: BigInt!
  totalRepaid: BigInt!
  _interestAccured: BigInt

  borrows: [Borrow!]! @derivedFrom(field: "position")
  repayments: [Repay!]! @derivedFrom(field: "position")
  deposits: [Deposit!]! @derivedFrom(field: "position")
  withdrawals: [Withdraw!]! @derivedFrom(field: "position")
}

enum InterestRateSide {
  " Interest rate accrued by lenders "
  LENDER

  " Interest rate paid by borrowers "
  BORROWER
}

enum InterestRateType {
  " Stable interest rate (e.g. Aave) "
  STABLE

  " Variable interest rate (e.g. Compound) "
  VARIABLE

  " Fixed interest rate (e.g. Notional) "
  FIXED
}

# Most markets only have a single interest rate given a specific type.
# However, fixed term lending protocols can have multiple rates with
# different duration/maturity per market. You can append a counter
# to the IDs to differentiate.
type InterestRate @entity {
  " { Interest rate side }-{ Interest rate type }-{ Market ID }-{ Optional: # days/hours since epoch time } "
  id: ID!

  " Interest rate in percentage APY. E.g. 5.21% should be stored as 5.21 "
  rate: BigDecimal!

  " Duration of the loan in days. Only applies to fixed term lending (e.g. Notional) "
  duration: Int

  " Maturity of the loan in block height. Only applies to fixed term lending (e.g. Notional) "
  maturityBlock: BigInt

  " The party the interest is paid to / received from "
  side: InterestRateSide!

  " The type of interest rate (e.g. stable, fixed, variable, etc) "
  type: InterestRateType!
}


##############################
##### Account-Level Data #####
##############################

type Account @entity {
  " { Account address } "
  id: ID!

  " Number of positions this account has "
  positionCount: Int!

  " All positions that belong to this account "
  positions: [Position!]! @derivedFrom(field: "account")

  " Number of open positions this account has "
  openPositionCount: Int!

  " Number of closed positions this account has "
  closedPositionCount: Int!

  " Number of deposits this account made "
  depositCount: Int!

  " All deposit events of this account "
  deposits: [Deposit!]! @derivedFrom(field: "account")

  " Number of withdrawals this account made "
  withdrawCount: Int!

  " All withdraw events of this account "
  withdraws: [Withdraw!]! @derivedFrom(field: "account")

  " Number of borrows this account made "
  borrowCount: Int!

  " All borrow events of this account "
  borrows: [Borrow!]! @derivedFrom(field: "account")

  " Number of repays this account made "
  repayCount: Int!

  " All repay events of this account "
  repays: [Repay!]! @derivedFrom(field: "account")

  " Number of times this account liquidated a position "
  liquidateCount: Int!

  " All liquidation events where this account was the liquidator "
  liquidates: [Liquidate!]! @derivedFrom(field: "liquidator")

  " Number of times this account has been liquidated "
  liquidationCount: Int!

  " All liquidation events where this account got liquidated "
  liquidations: [Liquidate!]! @derivedFrom(field: "liquidatee")
}


type Token @entity {
  " Smart contract address of the token "
  id: ID!

  " Name of the token, mirrored from the smart contract "
  name: String!

  " Symbol of the token, mirrored from the smart contract "
  symbol: String!

  " The number of decimal places this token uses, default to 18 "
  decimals: Int!

  " The number of decimal places this token uses, default to 18 "
  extraDecimals: Int!

  " Optional field to track the price of a token, mostly for caching purposes "
  lastPriceUSD: BigDecimal

  " Optional field to track the block number of the last token price "
  lastPriceBlockNumber: BigInt
}


##################################
##### Event-Level Data #####
##################################

"""
An event is any user action that occurs in a protocol. Generally, they are Ethereum events
emitted by a function in the smart contracts, stored in transaction receipts as event logs.
However, some user actions of interest are function calls that don't emit events. For example,
the deposit and withdraw functions in Yearn do not emit any events. In our subgraphs, we still
store them as events, although they are not technically Ethereum events emitted by smart
contracts.
"""

type Deposit @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that deposited tokens "
  account: Account!

  " The market tokens are deposited to "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token deposited "
  asset: Token!

  " Amount of token deposited in native units "
  amount: BigInt!

  " Amount of token deposited in USD "
  amountUSD: BigDecimal!
}

type Withdraw @entity {
  " { Transaction hash }-{ Log index }"
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that withdrew tokens "
  account: Account!

  " The market tokens are withdrew from "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token withdrawn "
  asset: Token!

  # Certain protocols (e.g. MakerDAO) uses a negative amount for withdraws. You
  # should convert them to positive for consistency.
  # e.g. Event log 27 in https://etherscan.io/tx/0xe957cf6252c7712c218c842c1ade672bf5ce529f8512f7a5ce7ebc8afa4ec690#eventlog

  " Amount of token withdrawn in native units "
  amount: BigInt!

  " Amount of token withdrawn in USD "
  amountUSD: BigDecimal!
}

# For CDPs, use this for mint events
type Borrow @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that borrowed/minted tokens "
  account: Account!

  " The market tokens are borrowed/minted from "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token borrowed "
  asset: Token!

  " Amount of token borrowed in native units "
  amount: BigInt!

  " Amount of token borrowed in USD "
  amountUSD: BigDecimal!
}

# For CDPs, use this for burn events
type Repay @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that repaid/burned tokens "
  account: Account!

  " The market tokens are repaid/burned to "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Token repaid/burned "
  asset: Token!

  " Amount of token repaid/burned in native units "
  amount: BigInt!

  " Amount of token repaid/burned in USD "
  amountUSD: BigDecimal!
}

type Liquidate @entity {
  " { Transaction hash }-{ Log index } "
  id: ID!

  " Transaction hash of the transaction that emitted this event "
  hash: String!

  " Nonce of the transaction that emitted this event "
  nonce: BigInt!

  " Event log index. For transactions that don't emit event, create arbitrary index starting from 0 "
  logIndex: Int!

  " Block number of this event "
  blockNumber: BigInt!

  " Timestamp of this event "
  timestamp: BigInt!

  " Account that carried out the liquidation "
  liquidator: Account!

  " Account that got liquidated "
  liquidatee: Account!

  " The market of the collateral being used "
  market: Market!

  " The user position changed by this event "
  position: Position!

  " Asset repaid (borrowed) "
  asset: Token!

  " Amount of collateral liquidated in native units "
  amount: BigInt!

  " Amount of collateral liquidated in USD "
  amountUSD: BigDecimal!

  " Amount of profit from liquidation in USD "
  profitUSD: BigDecimal!
}

